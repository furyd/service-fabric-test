trigger:
  branches:
    include:
      - main

variables:
- group: TU-TEST

pool:
  vmImage: windows-latest

steps:
- task: gitversion/setup@0
  displayName: 'Install GitTools'
  inputs:
    versionSpec: '5.x'
  enabled: false

- task: gitversion/execute@0
  displayName: 'Calculate SemVer'
  inputs:
    useConfigFile: true
    configFilePath: $(System.DefaultWorkingDirectory)\build\GitVersion.yml
  enabled: false

- powershell: 'dir env:'
  displayName: Output variables

- task: AzurePowerShell@5
  displayName: Create certificate
  inputs:
    azureSubscription: $(arm.subscription)
    azurePowerShellVersion: latestVersion
    inline: |
      $KeyVaultName = "$(arm.project.name)-$(arm.service.name)-kv-$(arm.environment.name)"
      $KeyVaultCertificateName = "$(arm.project.name)-$(arm.service.name)-cert-$(arm.environment.name)"
      $KeyVaultBase64Name = "$(arm.project.name)-$(arm.service.name)-cert-base64-$(arm.environment.name)"

      Write-Host "Key Vault: $($KeyVaultName)"
      Write-Host "Certificate Key: $($KeyVaultCertificateName)"
      Write-Host "Base64 Key: $($KeyVaultBase64Name)"

      #$SecurePassword = ConvertTo-SecureString -String "$(arm.vm.administrator.password)" -AsPlainText -Force
      #$CertFileFullPath = $(Join-Path (Split-Path -Parent $MyInvocation.MyCommand.Definition) "\$(arm.dns.name).pfx")

      #Write-Host "Path: $($CertFileFullPath)"

      #$NewCert = New-SelfSignedCertificate -CertStoreLocation Cert:\CurrentUser\My -DnsName $(arm.dns.name)
      #Export-PfxCertificate -FilePath $CertFileFullPath -Password $SecurePassword -Cert $NewCert

      #$Bytes = [System.IO.File]::ReadAllBytes($CertFileFullPath)
      #$Base64 = [System.Convert]::ToBase64String($Bytes)

      #$JSONBlob = @{
      #    data = $Base64
      #    dataType = 'pfx'
      #    password = "$(arm.vm.administrator.password)"
      #} | ConvertTo-Json

      #$ContentBytes = [System.Text.Encoding]::UTF8.GetBytes($JSONBlob)
      #$Content = [System.Convert]::ToBase64String($ContentBytes)

      #$SecretValue = ConvertTo-SecureString -String $Content -AsPlainText -Force
      #$CertificateSecret = Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name $KeyVaultCertificateName -SecretValue $SecretValue -Verbose
      #Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name $KeyVaultBase64Name -SecretValue $Base64 -Verbose
      #$resourceId = $(Get-AzKeyVault -VaultName $KeyVaultName).ResourceId

      #Write-Host "##vso[task.setvariable variable=arm.keyvault.resourceId;]$($resourceId)"
      #Write-Host "##vso[task.setvariable variable=arm.certificate.uri;]$($CertificateSecret.Id)"
      #Write-Host "##vso[task.setvariable variable=arm.certificate.thumbprint;]$($CertificateCert.Thumbprint)"

- task: DotNetCoreCLI@2
  displayName: Restore NuGet for .NET projects
  inputs:
    command: restore
    projects: 'src/**/*.csproj'
  enabled: false

- task: NuGetCommand@2
  displayName: Restore NuGet for Service Fabric projects
  inputs:
    restoreSolution: src/**/*.sfproj
    restoreDirectory: ../../packages
  enabled: false

- task: DotNetCoreCLI@2
  displayName: Publish Service Fabric Project
  inputs:
    projects: src/**/*.sfproj
    packDirectory: $(Build.ArtifactStagingDirectory)\\drop\\package
    arguments: '-c Release /p:Platform=x64 /p:Version=$(Build.BuildNumber) /t:Package /p:PackageLocation=$(Build.ArtifactStagingDirectory)\drop\package'
  enabled: false

- task: ServiceFabricUpdateManifests@2
  displayName: Update Service Fabric Version (Release)
  inputs:
    applicationPackagePath: $(Build.ArtifactStagingDirectory)\\drop\\package
    versionSuffix: $(Build.BuildNumber)
    versionBehavior: Replace
  enabled: false

- task: CopyFiles@2
  displayName: Copy XML Files To Artifacts (Release)
  inputs:
    SourceFolder: 'src\'
    Contents: |
     **\*.ServiceFabric\PublishProfiles\*.xml
     **\*.ServiceFabric\ApplicationParameters\*.xml
    TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\projectartifacts\'
    CleanTargetFolder: true
  enabled: false

- task: PublishBuildArtifacts@1
  displayName: Publish Package
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)\\drop\\package
    ArtifactName: package
  enabled: false

- task: qetza.replacetokens.replacetokens-task.replacetokens@4
  displayName: Replace tokens in parameters
  inputs:
    rootDirectory: deploy
    targetFiles: '**/*.parameters.devops.json'
  enabled: false

- task: PublishBuildArtifacts@1
  displayName: Publish ARM Templates
  inputs:
    PathtoPublish: deploy
    ArtifactName: ARM Templates
  enabled: false