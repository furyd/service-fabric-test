trigger:
  branches:
    include:
      - main

variables:
- group: TU-TEST

pool:
  vmImage: windows-latest

steps:
- task: gitversion/setup@0
  displayName: 'Install GitTools'
  inputs:
    versionSpec: '5.x'
  enabled: false

- task: gitversion/execute@0
  displayName: 'Calculate SemVer'
  inputs:
    useConfigFile: true
    configFilePath: $(System.DefaultWorkingDirectory)\build\GitVersion.yml
  enabled: false

- powershell: 'dir env:'
  displayName: Output variables

- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(arm.subscription)
    azurePowerShellVersion: latestVersion
    pwsh: true
    scriptType: inlineScript
    inline: |
      Install-Module Az.KeyVault -Scope CurrentUser -Force

      $KeyVaultName = "$(arm.project.name)-$(arm.service.name)-kv-$(arm.environment.name)"
      $KeyVaultCertificateName = "$(arm.project.name)-$(arm.service.name)-cert-$(arm.environment.name)"
      $KeyVaultBase64Name = "$(arm.project.name)-$(arm.service.name)-bob-$(arm.environment.name)"

      $resourceId = $(Get-AzKeyVault -VaultName $KeyVaultName).ResourceId
      $certificate = Get-AzKeyVaultCertificate -VaultName $KeyVaultName -Name $KeyVaultCertificateName

      if($certificate -ne $null){

        $secret = Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $certificate.Name
        $base64 = $secret.SecretValue | ConvertFrom-SecureString -AsPlainText

        Write-Host "##vso[task.setvariable variable=arm.keyvault.resourceId;]$($resourceId)"
        Write-Host "##vso[task.setvariable variable=arm.certificate.uri;]$($certificate.SecretId)"
        Write-Host "##vso[task.setvariable variable=arm.certificate.thumbprint;]$($certificate.Thumbprint)"
        Write-Host "##vso[task.setvariable variable=arm.certificate.base64;]$($base64)"
        Write-Host "##vso[task.setvariable variable=arm.certificate.password;]"

        Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name $KeyVaultBase64Name -SecretValue $secret.SecretValue

        exit;
      }

      $Policy = New-AzKeyVaultCertificatePolicy -SecretContentType "application/x-pkcs12" -SubjectName "CN=test" -IssuerName "Self" -ValidityInMonths 6 -ReuseKeyOnRenewal

      $operation = Add-AzKeyVaultCertificate -VaultName $KeyVaultName -Name $KeyVaultCertificateName -CertificatePolicy $Policy

      while($operation.Status -ne 'completed'){
        Write-Host "Status: $($operation.Status)"
        $operation = Get-AzKeyVaultCertificateOperation -VaultName $KeyVaultName -Name $KeyVaultCertificateName
      }

      $certificate = Get-AzKeyVaultCertificate -VaultName $KeyVaultName -Name $KeyVaultCertificateName
      $secret = Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $certificate.Name

      Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name $KeyVaultBase64Name -SecretValue $secret.SecretValue

      $base64 = $secret.SecretValue | ConvertFrom-SecureString -AsPlainText

      Write-Host "##vso[task.setvariable variable=arm.keyvault.resourceId;]$($resourceId)"
      Write-Host "##vso[task.setvariable variable=arm.certificate.uri;]$($certificate.SecretId)"
      Write-Host "##vso[task.setvariable variable=arm.certificate.thumbprint;]$($certificate.Thumbprint)"
      Write-Host "##vso[task.setvariable variable=arm.certificate.base64;]$($base64)"
      Write-Host "##vso[task.setvariable variable=arm.certificate.password;]"
  displayName: Create certificate

- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(arm.subscription)
    azurePowerShellVersion: latestVersion
    pwsh: true
    scriptType: inlineScript
    inline: |

      $resourceGroupName = "$(arm.project.name)-$(arm.service.name)-$(arm.environment.name)"
      $password = "$(arm.vm.administrator.password)" | ConvertTo-SecureString -AsPlainText -Force

      New-AzServiceFabricCluster -ResourceGroupName $resourceGroupName `
        -Location $(arm.location.name) `
        -ClusterSize 5 `
        -VmPassword $password `
        -CertificateSubjectName $(arm.dns.name) `
        -SecretIdentifier $(arm.certificate.uri) `
        -OS WindowsServer2016Datacenter

  displayName: Create cluster

- task: qetza.replacetokens.replacetokens-task.replacetokens@4
  displayName: 'Replace tokens in parameters'
  inputs:
    rootDirectory: build
    targetFiles: '**/*.service-connection.json'

- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(arm.subscription)
    azurePowerShellVersion: latestVersion
    pwsh: true
    scriptType: inlineScript
    inline: |
      az devops service-endpoint create --service-endpoint-configuration build\service-fabric.service-connection.json
  displayName: Create service connection

- task: DotNetCoreCLI@2
  displayName: Restore NuGet for .NET projects
  inputs:
    command: restore
    projects: 'src/**/*.csproj'
  enabled: false

- task: NuGetCommand@2
  displayName: Restore NuGet for Service Fabric projects
  inputs:
    restoreSolution: src/**/*.sfproj
    restoreDirectory: ../../packages
  enabled: false

- task: DotNetCoreCLI@2
  displayName: Publish Service Fabric Project
  inputs:
    projects: src/**/*.sfproj
    packDirectory: $(Build.ArtifactStagingDirectory)\\drop\\package
    arguments: '-c Release /p:Platform=x64 /p:Version=$(Build.BuildNumber) /t:Package /p:PackageLocation=$(Build.ArtifactStagingDirectory)\drop\package'
  enabled: false

- task: ServiceFabricUpdateManifests@2
  displayName: Update Service Fabric Version (Release)
  inputs:
    applicationPackagePath: $(Build.ArtifactStagingDirectory)\\drop\\package
    versionSuffix: $(Build.BuildNumber)
    versionBehavior: Replace
  enabled: false

- task: CopyFiles@2
  displayName: Copy XML Files To Artifacts (Release)
  inputs:
    SourceFolder: 'src\'
    Contents: |
     **\*.ServiceFabric\PublishProfiles\*.xml
     **\*.ServiceFabric\ApplicationParameters\*.xml
    TargetFolder: '$(Build.ArtifactStagingDirectory)\drop\projectartifacts\'
    CleanTargetFolder: true
  enabled: false

- task: PublishBuildArtifacts@1
  displayName: Publish Package
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)\\drop\\package
    ArtifactName: package
  enabled: false

- task: qetza.replacetokens.replacetokens-task.replacetokens@4
  displayName: Replace tokens in parameters
  inputs:
    rootDirectory: deploy
    targetFiles: '**/*.parameters.devops.json'
  enabled: false

- task: PublishBuildArtifacts@1
  displayName: Publish ARM Templates
  inputs:
    PathtoPublish: deploy
    ArtifactName: ARM Templates
  enabled: false